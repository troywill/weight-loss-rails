* TODO [0/2] Welcome controller
  1. [ ] generate the controller
     #+BEGIN_SRC sh :tangle bin/generate-controller-welcome :shebang #!/bin/sh
       rails generate controller welcome index login logout
     #+END_SRC
     #+BEGIN_EXAMPLE
                  create  app/controllers/welcome_controller.rb
              route  get "welcome/logout"
              route  get "welcome/login"
              route  get "welcome/index"
             invoke  erb
             create    app/views/welcome
             create    app/views/welcome/index.html.erb
             create    app/views/welcome/login.html.erb
             create    app/views/welcome/logout.html.erb
             invoke  test_unit
             create    test/controllers/welcome_controller_test.rb
             invoke  helper
             create    app/helpers/welcome_helper.rb
             invoke    test_unit
             create      test/helpers/welcome_helper_test.rb
             invoke  assets
             invoke    coffee
             create      app/assets/javascripts/welcome.js.coffee
             invoke    scss
             create      app/assets/stylesheets/welcome.css.scss
     #+END_EXAMPLE
  2. [ ] Set root route
     - file:../config/routes.rb
     #+BEGIN_SRC ruby
       # You can have the root of your site routed with "root"
       root 'welcome#index'
     #+END_SRC
* TODO [0/6] Make pretty layout
  1. [ ] Update file:../app/views/layouts/application.html.erb
     - The new application.html.erb, version 1
       #+BEGIN_SRC html
         <!DOCTYPE html>
         <html>
         <head>
           <title>Weight</title>
           <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
           <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
           <%= csrf_meta_tags %>
         </head>
         <body>
           <div id='header'>
             <h1>Weight Goal placeholder, i.e. 150 lbs @ Monday, May 6, 2013 7:48:02 AM</h1>
           </div>
           <div id='sidebar'>
             <!-- see "Lists as Navigation", page 140, HTML Dog -->
             <!-- see "Doing Away With Unwanted Padding and Margins", page 144, HTML Dog -->
             <ul>
               <li><%= link_to "Overview", root_path %></li>
               <li><%= link_to "New reading", root_path %></li>
               <li><%= link_to "See all readings", root_path %></li>
               <li><%= link_to "Goal", root_path %></li>
               <li><%= link_to "3 day graph", root_path %></li>
               <li><%= link_to "7 day graph", root_path %></li>
               <li><%= link_to "28 day graph", root_path %></li>
               <li><%= link_to "1 year graph", root_path %></li>
               <li><%= link_to "Log out", welcome_logout_path %></li>
             </ul>
           </div>
           <div id='main'>
             <%= yield %>
           </div>
           <div id='footer'>
             <h1>footer placeholder, i.e., Weight 152.56</h1>
             
           </div>
         
           <%= yield %>
         </body>
         </html>
       #+END_SRC
     - The application.html.erb generated by Rails 4.0.0.rc1 on May 6, 2013
       #+BEGIN_SRC html
         <!DOCTYPE html>
         <html>
         <head>
           <title>Weight</title>
           <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
           <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
           <%= csrf_meta_tags %>
         </head>
         <body>
         
         <%= yield %>
         
         </body>
         </html>
       #+END_SRC
  2. [ ] Copy stylesheet from repo to 
     - file:../app/assets/stylesheets/fixed-positioning.css
     - V1
       #+BEGIN_SRC css
         #header {
           position: fixed;
           width: 100%;
           height: 1.5em;
           top: 0;
           right: 0;
           bottom: auto;
           left: 0;
           color: white;
           background-color: #443266;
           margin: 0;
           padding: 0;
           text-align: center;
         }
         
         #header h1 {
           font-size: 1em;
           margin: 0;
           padding: 0;
         }    
         
         
         #sidebar {
           position: fixed;
           width: 10em;
           height: auto;
           top: 1.5em;
           right: auto;
           bottom: 1.5em;
           left: 0;
           background-color: #C3C3E5
         }
         
         #sidebar ul {
          margin: 0;
          padding: 0;
          margin-left: 1.5em;
         }
         
         ul {
             margin: 0;
             padding: 0;
             margin-left: 1.5em;
         }
         
         #sidebar img {
         display: block;
         margin-left: auto;
         margin-right: auto;
         }
         
         #main {
           position: fixed;
           width: auto;
           height: auto;
           top: 1.5em;
           right: 0;
           bottom: 1.5em;
           left: 10em;
           background-color: #F1F0FF;
           overflow: auto;
         }
         
         #footer {
           position: fixed;
           width: 100%;
           height: 1.5em;
           top: auto;
           right: 0;
           bottom: 0;
           left: 0;
           color: white;
           background-color: #8C489F;
           margin-left: auto;
           margin-right: auto;
           text-align: center;
         }
         
         #footer h1 {
             font-size: 1em;
             margin: 0;
             padding: 0;
             display: inline;
         }
         
         #footer p {
             display:inline;
         }
         
       #+END_SRC
     - from w3.org
       #+BEGIN_SRC css
         #header {
             position: fixed;
             width: 100%;
             height: 15%;
             top: 0;
             right: 0;
             bottom: auto;
             left: 0;
         }
         #sidebar {
             position: fixed;
             width: 10em;
             height: auto;
             top: 15%;
             right: auto;
             bottom: 100px;
             left: 0;
         }
         #main {
             position: fixed;
             width: auto;
             height: auto;
             top: 15%;
             right: 0;
             bottom: 100px;
             left: 10em;
         }
         #footer {
             position: fixed;
             width: 100%;
             height: 100px;
             top: auto;
             right: 0;
             bottom: 0;
             left: 0;
         }
       #+END_SRC
  3. [ ] Create welcome/graph.html.erb view
  4. [ ] Create graph method in welcome controller
  5. [ ] Add route
  6. [ ] Add link to graph view in layout
* TODO [0/2] Create User model, controller, and view
  1. [ ] Generate a `user` scaffold
     #+BEGIN_SRC sh
       rails generate scaffold user name:string email:string
     #+END_SRC
  2. [ ] Update the database
     #+BEGIN_SRC sh
       rake db:migrate
     #+END_SRC
  #+END_SRC
* TODO [0/7] Identify the user
  1. [ ] Add a before filter to the application controller
     - See page 201 in Agile book for reference, "ITERATION I3: LIMITING ACCESS"
     - place the line after "class ApplicationController < ActionController::Base"
     - file:../app/controllers/application_controller.rb
       #+BEGIN_SRC ruby
         before_filter :identify_user, :except => :login
       #+END_SRC
  2. [ ] write a idenify_user method in application controller
     - make the method private
     - file:../app/controllers/application_controller.rb
       #+BEGIN_SRC ruby
         private
         def identify_user
           if cookies[:weight_loss_cookie]
             if User.find_by_email(cookies[:weight_loss_cookie])
               @user = User.find_by_email(cookies[:weight_loss_cookie])
               session[:user_id] = @user.id
               return
             end
           end
           if User.find_by_id(session[:user_id])
             @user = User.find_by_id(session[:user_id])
           else
             flash[:notice] = "Please log in"
             redirect_to :controller => :welcome, :action => :login
           end
         end
       #+END_SRC
  3. [ ] Add a form to the login page
     - file:../app/views/welcome/login.html.erb
       #+BEGIN_SRC html
         <%= form_tag do %>
         <fieldset>
           <legend>Please Log In</legend>
           <p>
             <label for="email">Email:</label>
             <%= text_field_tag :email, params[:email] %>
           </p>
           <p><%= submit_tag "Login" %></p>
         </fieldset>
         <% end %>
       #+END_SRC
  4. [ ] Add a POST route for the login form
     - file:../config/routes.rb
       #+BEGIN_SRC ruby
         Weight::Application.routes.draw do
           resources :users
         
           get "welcome/index"
           get "welcome/login"
           post "welcome/login"
           get "welcome/logout"
           ...
       #+END_SRC
  5. [ ] Add a login method to the welcome controller
     - file:../app/controllers/welcome_controller.rb
       #+BEGIN_SRC ruby
         def login
           session[:user_id] = nil
           if request.post?
             if user = User.authenticate(params[:email])
               session[:user_id] = user.id
               # http://api.rubyonrails.org/classes/ActionDispatch/Cookies.html
               cookies[:weight_loss_cookie] = { :value => user.email, :expires => 1.month.from_now }
               redirect_to(:action => "index" )
             else
               flash.now[:notice] = "Unknown email"
             end
           end
         end
       #+END_SRC
  6. [ ] Add an authenticate method to the user model
     - file:../app/models/user.rb
       #+BEGIN_SRC ruby
         # Agile book uses more elaborate method with more security
         # def self.authenticate(username, password)
         def self.authenticate(email)
           #  user = self.find_by_username(username)
           user = self.find_by_email(email)
           if user
             #    if user.password != password
               if user.email != email
                 user = nil
               end
           end
           user
         end
       #+END_SRC
  7. [ ] Write the logout method in the welcome controller
     - file:../app/controllers/welcome_controller.rb
       #+BEGIN_SRC ruby
         def logout
           session[:user_id] = nil
           cookies.delete :weight_loss_cookie
         end
       #+END_SRC
* TODO [/] Create "Readings" model, controller, and views
  
* TODO [/] Create "Settings" model, controller, and views
  - filter_rate_gain:integer
  - filter_rate_loss:integer
  - graph_upper:integer
  - graph_lower:integer
  - graph_lines:integer
* TODO [/] Create Goal model, controller, and views
* TODO [0/3] Display current goal
** TODO goal_now in User model file:../../app/models/user.rb
   #+BEGIN_SRC ruby   
     def self.goal_now(user_id)
       u = User.find(user_id)
       elapsed_time = Time.now - u.goal_start_time
       lbs_per_second = ( u.goal_loss_rate / 86400.0 / 3500.0 )
       return ( u.goal_start_weight - lbs_per_second * elapsed_time )
     end
   #+END_SRC
** TODO @goal_now in welcome controller, index method file:../../app/controllers/welcome_controller.rb (C-c C-o)
   #+BEGIN_SRC ruby
     u = User.find(session[:user_id])
     @goal_now = User.goal_now(u.id)
   #+END_SRC   
** TODO View file:../../app/views/welcome/index.html.erb
   <%= number_with_precision(@goal_now, :precision => 3)%>
* TODO [0/7] Weight as a function of time
1. [ ] In Reading model, weight_at_time function file:../../app/models/reading.rb 
   #+begin_src ruby
     def self.weight_at_time(user_id, time)
       time_initial = Reading.time_initial(user_id)
       weight_initial = Reading.weight_initial(user_id)
       if ( time < time_initial )
         return weight_initial
       end
       max_gain_rate = User.filter_rate_gain(user_id)
       max_loss_rate = User.filter_rate_loss(user_id)
       readings = Reading.get_readings_after( user_id, time_initial, time )
       for reading in readings
         w = apply_filter(max_gain_rate, max_loss_rate, time_initial,
                          weight_initial, reading.reading_time, reading.weight)
         time_initial = reading.reading_time
         weight_initial = w
       end
       next_reading = Reading.get_next_reading_after(user_id, time)
       if next_reading
         weight = interpolate( max_gain_rate, max_loss_rate, time_initial, weight_initial,
                               next_reading.reading_time, next_reading.weight, time )
       else
         weight = apply_filter(max_gain_rate, max_loss_rate, time_initial, weight_initial, time, reading.weight)
       end
       #    return number_with_precision(weight, :precision => 5 )                                                               
       return weight
     end
   #+end_src
2. [ ] In Reading model, time_initial function file:../../app/models/reading.rb 
   #+begin_src ruby
     def self.time_initial( user_id )
       return Reading.order('reading_time ASC').where(:user_id => user_id).first.reading_time
     end
   #+end_src
3. [ ] In Reading model, weight_initial function
   #+begin_src ruby
     def self.weight_initial( user_id )
       return Reading.order('reading_time ASC').where(:user_id => user_id).first.weight
     end
   #+end_src
4. [ ] In User model, functions filter_rate_gain, filter_rate_loss, goal_loss_rate file:../../app/models/user.rb 
   #+begin_src ruby
     def self.filter_rate_gain(user_id)
       return User.where(:id => user_id).first.filter_rate_gain
     end
     def self.filter_rate_loss(user_id)
       return User.where(:id => user_id).first.filter_rate_loss
     end
     def self.goal_loss_rate(user_id)
       cals_per_day = User.where(:id => user_id).first.goal_loss_rate
       lbs_per_second = cals_per_day / 3500.0 / 86400.0
       return  lbs_per_second
     end
   #+end_src
5. [ ] In Reading model, self.get_readings_after, self.get_next_reading_after( user_id, time ) file:../../app/models/reading.rb 
   #+BEGIN_SRC ruby
     def self.get_readings_after( user_id, start_time, end_time )
       return Reading.order('reading_time ASC').where(:user_id => user_id).where('reading_time >= ? AND reading_time <= ?', start_time, end_time)
     end
     def self.get_next_reading_after( user_id, time )
         return Reading.order('reading_time ASC').where(:user_id => user_id).where('reading_time > ?', time).first
     end
   #+END_SRC
6. [ ] In Reading model, apply_filter( max_gain_rate, max_loss_rate, initial_time, initial_weight, time, weight ) file:../../app/models/reading.rb 
   #+BEGIN_SRC ruby
     def self.apply_filter( max_gain_rate, max_loss_rate, initial_time, initial_weight, time, weight )
       if ( weight == initial_time )
         return weight
       else
         delta_time = ( time - initial_time ).to_i
         cals_day_pounds_second = 1.0 / 86400.0 / 3500.0
         max_allowable_weight = initial_weight + ( max_gain_rate * cals_day_pounds_second * delta_time )
         min_allowable_weight = initial_weight - ( max_loss_rate * cals_day_pounds_second * delta_time )
         if ( weight > max_allowable_weight )
           return max_allowable_weight
         end
         if ( weight < min_allowable_weight )
           return min_allowable_weight
         end
       end
       return  weight
     end
   #+END_SRC
7. [ ] In Reading model, interpolate  file:../../app/models/reading.rb 
   #+BEGIN_SRC ruby
     def self.interpolate( max_gain_rate, max_loss_rate, last_time, last_weight, next_time, next_weight, time )
       filtered_next_weight = apply_filter(max_gain_rate, max_loss_rate, last_time, last_weight, next_time, next_weight )
       delta_time = next_time - last_time
       delta_weight = ( filtered_next_weight - last_weight )
       percent = ( time - last_time ) / delta_time.to_f
       interpolated_weight = last_weight + percent * delta_weight
     end
   #+END_SRC
* TODO Display weight now in file:../../app/views/welcome/index.html.erb
  #+begin_src ruby
    <%= Reading.weight_at_time(session[:user_id], Time.now) %>
  #+end_src
* TODO [0/7] Add New Reading to Welcome Page 
  1. [ ] Add a _form partial by copyingreading/_form 
     - Note: we will have an error because @reading is not defined. Fix in next step.
  2. [ ] Add  @reading = Reading.new to index method in welcome controller
  3. [ ] Put embeded Ruby in index
     #+BEGIN_SRC ruby
       <%= render 'form' %>
     #+END_SRC
     - file:../../app/views/welcome/index.html.erb
  4. [ ] Add hidden field
     - See http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field
     #+BEGIN_SRC html
       <%= f.hidden_field(:user_id, :value => session[:user_id]) %>
     #+END_SRC
     - file:../../app/views/welcome/_form.html.erb
  5. [ ] Delete <%= f.label :user_id %><br />
     #+BEGIN_SRC html
       <%= f.label :user_id %><br />
       <%= f.number_field :user_id %>
     #+END_SRC
     - file:../../app/views/welcome/_form.html.erb
  6. [ ] Add @reading.user_id = session[:user_id] in create method in readings controller
     - We do this because can create a new reading from reading scaffold
     - file:../../app/controllers
     #+BEGIN_SRC ruby
       @reading.user_id = session[:user_id]
     #+END_SRC
  7. [ ] Remove the user field
     - file:../../app/views/readings/_form.html.erb
     #+BEGIN_SRC html
       <div class="field">
         <%= f.label :user_id %><br />
         <%= f.number_field :user_id %>
       </div>
     #+END_SRC
* TODO [0/8] Build a mailer to send messages to users 
  - see Chapter 13: Task H: Sending Mail
  - [ ] environment.rb
    - file:../../config/environments/development.rb
      #+BEGIN_SRC ruby 
        config.action_mailer.delivery_method = :smtp | :sendmail | :test
         
        Depot::Application.configure do
          config.action_mailer.delivery_method = :smtp
           
          config.action_mailer.smtp_settings = {
            address: "smtp.gmail.com",
            port: 587,
            domain: "usahealthscience.com",
            authentication: "plain",
            user_name: "username",
            password: "secret",
            enable_starttls_auto: true
          }
        end
      #+END_SRC
  - [ ] restart server
  - [ ] rails generate mailer GoalReminder goal calculation
    #+BEGIN_SRC sh 
      rails generate mailer GoalReminder goal calculation
    #+END_SRC
    #+BEGIN_EXAMPLE 
      create  app/mailers/goal_reminder.rb
      invoke  erb
      create    app/views/goal_reminder
      create    app/views/goal_reminder/goal.text.erb
      create    app/views/goal_reminder/calculation.text.erb
      invoke  test_unit
      create    test/functional/goal_reminder_test.rb
    #+END_EXAMPLE
  - [ ] Edit to, subject
    + Change into app/mailers and edit goal_reminder.rb
      - file:../../app/mailers/goal_reminder.rb 
	#+BEGIN_SRC ruby
          def goal
            @greeting = "Hi at 2:53:29"
            @user = User.find(1)
            @goal = User.goal_now(@user.id)
            subject = "#{@goal}"
            mail( :to => "troydwill@gmail.com", :subject => "#{subject}" )
          end
	#+END_SRC
  - [ ] Edit the message text
    + file:../../app/views/goal_reminder/goal.text.erb
      #+BEGIN_SRC html
        <%= number_to_human(@goal, :units => {:unit => "pounds"}, :precision => 4, :significant => 4) %>
        GoalReminder#goal
        <%= @greeting %>, http://usahealthscience.com:3000/readings/new
      #+END_SRC
  - [ ] In console => GoalReminder.goal.deliver
  - [ ] 24.1 A Stand-Alone Application Using Active Record
    #+BEGIN_SRC ruby
      require "config/environment.rb"
      order = Order.find(1)
      order.name = "Dave Thomas"
      order.save
    #+END_SRC
  - [ ] Write stand alone mailer application
    #+BEGIN_SRC ruby :tangle stand_alone/stand-alone-mailer.rb :shebang #!/usr/bin/env ruby
      require "../../../config/environment.rb"
      user_id = 1
      GoalReminder.goal.deliver
    #+END_SRC
    - file:stand_alone/stand-alone-mailer.rb
* TODO [0/3] Display readings table on Welcome Page
  - @readings = Readings.all gives every user's readings; we only want the logged in user's readings
  - [ ] Controller: @readings = Reading.by_user(session[:user_id]).order('reading_time DESC') 
    + file:../../app/controllers/welcome_controller.rb ( welcome controller, index method )
      #+BEGIN_SRC ruby
        @readings = Reading.by_user(session[:user_id]).order('reading_time DESC')
      #+END_SRC
    + Since we've introduced the by_user method we need to define it. See next step.
  - [ ] Model: scope :by_user, lambda { |user_id| where('user_id = ?', user_id) } 
    + file:../../app/models/reading.rb
      #+BEGIN_SRC ruby
        def self.by_user (user_id)
          scope :by_user, lambda { |user_id| where('user_id = ?', user_id) }
        end
      #+END_SRC
    + See http://asciicasts.com/episodes/215-advanced-queries-in-rails-3
    + See Agile book, active record
  - [ ] View
    + file:../../app/views/welcome/index.html.erb
      #+BEGIN_SRC html
        <table>
          <thead>
            <tr>
              <th>User</th>
              <th>Weight</th>
              <th>Reading time</th>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          
          <tbody>
          <% @readings.each do |reading| %>
          <tr>
            <td><%= reading.user_id %></td>
            <td><%= reading.weight %></td>
            <td><%= reading.reading_time %></td>
            <td><%= link_to 'Show', reading %></td>
            <td><%= link_to 'Edit', edit_reading_path(reading) %></td>
            <td><%= link_to 'Destroy', reading, method: :delete, data: { confirm: 'Are you sure?' } %></td>
          </tr>
          <% end %>
          </tbody>
        </table>
      #+END_SRC

* TODO [0/2] Weight loss/gain over the last 28 days
  - [ ] Define a weight_loss_interval function 
    + I wasn't sure whether to put in reading or user model. I
      decided to put in reading model because that's where the
      weight_at_time function is
    + TDW Note to self: check if session hash is defined in model
    + file:../../app/models/reading.rb
      #+BEGIN_SRC ruby
        def self.weight_loss_interval(user_id, start_time, finish_time )
          user_id = session[:user_id]
          start_weight = Reading.weight_at_time(user_id, start_time)
          finish_weight = Reading.weight_at_time(user_id, finish_time)
          return (finish_weight-start_weight)
        end
      #+END_SRC
  - [ ] Put in welcome/index
    + file:../../app/views/welcome/index.html.erb
      #+BEGIN_SRC html
        <h1>28 days: <%= Reading.weight_loss_interval(session[:user_id],Time.now.ago(86400*28), Time.now) %></h1>
      #+END_SRC
* TODO [0/1] Change time zone
  - rake -D time
  - rake time:zones:us
  - [ ] file:../../config/application.rb
    #+BEGIN_SRC ruby
      # config.time_zone = 'Central Time (US & Canada)'
      config.time_zone = 'Pacific Time (US & Canada)'
    #+END_SRC
* TODO [0/8] Draw a graph
  1. http://nubyonrails.com/pages/gruff
  2. https://github.com/topfunky/gruff
  3. http://www.undefined.com/ia/archives/2005/12/gruff_graph_007.html
  4. [ ] Build and Install RMagick
     1. [ ] Download http://rubyforge.org/frs/download.php/70067/RMagick-2.13.2.tar.bz2 or from https://github.com/rmagick/rmagick
     2. [ ] Run "ruby setup.rb"
     3. [ ] Run "sudo ruby setup.rb install"
  5. [ ] sudo gem install gruff
  6. [ ] add gruff to Gem file
  7. [ ] Generate the controller for generating Graphs
     #+BEGIN_SRC sh
       rails generate controller Graph generate week month year
     #+END_SRC
  8. [ ] (Optional) See http://www.igvita.com/2007/01/05/dynamic-stat-graphs-in-rails/
  9. [ ] (Optional) See http://api.rubyonrails.org/classes/ActionController/DataStreaming.html
  10. [ ] In weight_graph_controller.rb:
      - file:../../app/controllers/graph_controller.rb
      #+BEGIN_SRC ruby
	def month
          g = Gruff::Line.new
          # Next line is transient bug fix; see http://stackoverflow.com/questions/10881173/gruff-is-not-working-well-what-to-do ( troydwill@gmail.com )
          g.marker_count = 4 #explicitly assign value to @marker_count
          g.title = "My Graph" 
          g.data("Apples", [1, 2, 3, 4, 4, 3])
          g.data("Oranges", [4, 8, 7, 9, 8, 9])
          g.data("Watermelon", [2, 3, 1, 5, 6, 8])
          g.data("Peaches", [9, 9, 10, 8, 7, 9])
          g.labels = {0 => '2003', 2 => '2004', 4 => '2012'}
          send_data(g.to_blob, :disposition => 'inline', :type => 'image/png', :filename => "1week.png")
	end
 #+END_SRC
  11. [ ] In View:
      - file:../../app/views/graph/month.html.erb
	#+BEGIN_SRC ruby       
          <img src="<%= url_for :controller => "graph", :action=> "month" %>" style="border:10px solid #aabcca;" />
	#+END_SRC
* TODO [0/2] Graph last 28 days
  1. [ ] file:../../app/controllers/graph_controller.rb
    #+BEGIN_SRC ruby
      def month
        g = Gruff::Line.new
        weight = 0
        time_at_point_in_past = 0
        user_id = session[:user_id]
        time_first_reading = Reading.time_initial(user_id)
        weight_first_reading = Reading.weight_initial(user_id).to_f
        # Get weight values for last 28 days
        weight_array = Array.new
        number_of_periods = 28
        (0..number_of_periods).each do |period_num|
          time_at_point_in_past = Time.now-(number_of_periods-period_num).day
          
          if ( time_at_point_in_past < time_first_reading )
            weight = weight_first_reading
          else
            weight = Reading.weight_at_time(user_id, time_at_point_in_past)
          end
          # Three significant digits to stop Gruff graph library from acting strangely                                            
          weight = ((weight * 10000).to_i)/10000.0
          weight_array.push(weight)
        end
        
        g.data "28 days", weight_array
        send_data(g.to_blob, :type => 'image/png', :filename => "28days.png", :disposition => 'inline' )
        # this writes the file to the hard drive for caching
        # and then writes it to the screen.
        # g.write("/tmp/month.png")
        # send_file "/tmp/month.png", :type => 'image/png', :disposition => 'inline'
      end
    #+END_SRC
  2. [ ] file:../../app/views/graph/month.html.erb
* TODO Draw Google Graph
  1. [ ] Generate the controller for generating Graphs
     #+BEGIN_SRC sh
       rails generate controller GoogleGraph week month year
     #+END_SRC
  2. [ ] See http://zargony.com/2012/02/29/google-charts-on-your-site-the-unobtrusive-way
  3. [ ] Place a 28 day data array method in Readings controller
     - Commentary: :: We will pass data into Google javascript in the view
     - file:../../app/models/reading.rb
       #+BEGIN_SRC ruby
         def self.month_array(user_id)
           weight = 0
           time_at_point_in_past = 0
           time_first_reading = Reading.time_initial(user_id)
           weight_first_reading = Reading.weight_initial(user_id).to_f
           # Get weight values for last 28 days
           weight_array = Array.new
           weight_array.push(['Year','Weight'])
           number_of_periods = 28
           (0..number_of_periods).each do |period_num|
             time_at_point_in_past = Time.now-(number_of_periods-period_num).day
             
             if ( time_at_point_in_past < time_first_reading )
               weight = weight_first_reading
             else
               weight = Reading.weight_at_time(user_id, time_at_point_in_past)
             end
             # Three significant digits to stop Gruff graph library from acting strangely                                            
             weight = ((weight * 10000).to_i)/10000.0
             weight_array.push(["", weight])
           end
           return weight_array
         end
       #+END_SRC
  4. [ ] Create a GoogleGraph layout
     - var options={title:'Weight',pointSize:5,vAxis:{minValue: 180}};
     - file:../../app/views/layouts/google_graph.html.erb
       #+BEGIN_SRC html
         <html>
           <head>
             <script type="text/javascript" src="https://www.google.com/jsapi"></script>
             <script type="text/javascript">
               google.load("visualization", "1", {packages:["corechart"]});
               google.setOnLoadCallback(drawChart);
         
               function drawChart() {
               var data = google.visualization.arrayToDataTable(
               [['Year','Sales','Expenses'],['2013',1000,400],['2005',1170,460],['2006',660,1120],['2007',1030,540]]
               );
               data = google.visualization.arrayToDataTable(
               <%= raw Reading.month_array(session[:user_id]).to_json %>
               );
         
               var options = {
               title: 'Weight 1 month'
               };
               
               var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
               chart.draw(data, options);
               }
             </script>
           </head>
           <body>
             <div id="chart_div" style="width: 900px; height: 500px;"></div>
           </body>
         </html>
       #+END_SRC
  5. [ ] Create a goal as a function of time method, place in User model
     - file:../../app/models/user.rb
       #+BEGIN_SRC ruby
         def self.goal_at_time(user_id, time)
           u = User.find(user_id)
           if ( time < u.goal_start_time )
             return u.goal_start_weight.to_f
           end
           elapsed_time = time - u.goal_start_time
           lbs_per_second = ( u.goal_loss_rate / 86400.0 / 3500.0 )
           return ( u.goal_start_weight - lbs_per_second * elapsed_time ).to_f
         end
       #+END_SRC
  6. [ ] Add goal to month_array method in Reading model so it shows on the Google chart
     - file:../../app/model/reading.rb
       #+BEGIN_SRC ruby
         weight_array.push(['Year','Weight', 'Goal'])
         ...
         goal = User.goal_at_time(user_id, time_at_point_in_past)
         weight_array.push(["", weight, goal])
       #+END_SRC
* Revisit analysis
1. [ ] Link welcome.html.erb
* Add last weight reading as words helper
1. [ ] add method to welcome controller  
#+BEGIN_SRC ruby
  def self.get_last_reading( user_id )
    return Reading.order('reading_time ASC').where(:user_id => user_id).last
  end
#+END_SRC
* Figure out when we can achieve goal
#+BEGIN_SRC ruby
  # welcome_helper.rb
  user_id = session[:user_id]
  goal_loss_rate = User.goal_loss_rate(user_id)
  lbs_per_second = goal_loss_rate / 3500 / 86400
#+END_SRC
* Graph last two years
#+BEGIN_SRC ruby
  def month
    g = Gruff::Line.new
    weight = 0
    time_at_point_in_past = 0
    user_id = session[:user_id]
    time_first_reading = Reading.time_initial(user_id)
    weight_first_reading = Reading.weight_initial(user_id).to_f
    # Get weight values for last 28 days
    weight_array = Array.new
    number_of_periods = 28
    (0..number_of_periods).each do |period_num|
      time_at_point_in_past = Time.now-(number_of_periods-period_num).day

      if ( time_at_point_in_past < time_first_reading )
        weight = weight_first_reading
      else
        weight = Reading.weight_at_time(user_id, time_at_point_in_past)
      end
      weight_array.push(weight)
    end

    g.data "28 days", weight_array
    send_data(g.to_blob, :type => 'image/png', :filename => "28days.png")
    
  end

  def year
  end
end
#+END_SRC
2. [ ] Add view
3. [ ] Add route

* Footer
1. [ ] Put function to find goal difference in the Reading model
#+BEGIN_SRC ruby
def self.goal_difference( user_id )
  goal_now = User.goal_now(user_id)
  weight_now = Reading.weight_at_time(user_id, Time.now)
  return goal_now - weight_now
end
#+END_SRC ruby
2. [ ] in application helper, footer method
#+BEGIN_SRC ruby
def footer
  if session[:user_id]
    user_id = session[:user_id]
    lbs = number_with_precision(@diff, :precision => 1, :significant => true)
    goal_difference = Reading.goal_difference(user_id)
    # cals = @diff * 3500
    # cals = number_with_precision(cals, :precision => 2, :significant => true)
    #      return "#{lbs} lbs (#{cals} cal)"
    return "#{lbs} lbs"
  else
    return "nil"
  end
end
#+END_SRC ruby
* About your last reading
  1. [ ] Refactor     last_reading = Reading.get_last_reading(user_id) helper to @last_reading in controller
* Emacs Org Mode Cheat Table
** Emacs termology  
  - M-x means hold Alt key and tap x
  - C-c means hold Ctrl key and then tap c key
  
  | Key      | Function | Description                             |
  |----------+----------+-----------------------------------------|
  | C-j      |          |                                         |
  | <s + TAB |          | #+BEGIN_SRC / #+END_SRC macro expansion |
  | C-'      |          |                                         |
** Window splitting
   - C-x 2 :: Split window in two
   - C-o :: Switch to the other window
