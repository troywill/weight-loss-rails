-*- mode: org -*-
* Display date
** Time.now 2012-03-09 18:55:26 -0800
** Time.now.to_s(:long_ordinal) ( See [[http://api.rubyonrails.org/classes/Time.html][Time.html]] )
* Display current goal
** Controller
#+BEGIN_SRC ruby
   u = User.find(session[:user_id])
   @goal_now = User.goal_now(u.id)
#+END_SRC   
** Model
#+BEGIN_SRC ruby   
   def self.goal_now(user_id)
     u = User.find(user_id)
     elapsed_time = Time.now - u.goal_start_time
     lbs_per_second = ( u.goal_loss_rate / 86400.0 / 3500.0 )
     return ( u.goal_start_weight - lbs_per_second * elapsed_time )
   end
#+END_SRC
** View
   number_with_precision(@goal_now, :precision => 3)
* Mail
** Chapter 13: Task H: Sending Mail
1. [ ] environment.rb
    config.action_mailer.delivery_method = :smtp | :sendmail | :test

   Depot::Application.configure do
     config.action_mailer.delivery_method = :smtp

     config.action_mailer.smtp_settings = {
       address: "smtp.gmail.com",
       port: 587,
       domain: "domain.of.sender.net",
       authentication: "plain",
       user_name: "dave",
       password: "secret",
       enable_starttls_auto: true
     }
   end
#+END_SRC
2. [ ] restart server
3. [ ] rails generate mailer GoalReminder goal calculation
      create  app/mailers/goal_reminder.rb
      invoke  erb
      create    app/views/goal_reminder
      create    app/views/goal_reminder/goal.text.erb
      create    app/views/goal_reminder/calculation.text.erb
      invoke  test_unit
      create    test/functional/goal_reminder_test.rb
4. [ ] Change into app/mailers and edit goal_reminder.rb
5. [ ] In console => GoalReminder.goal.deliver
6. [ ] 24.1 A Stand-Alone Application Using Active Record
#+BEGIN_SRC ruby
    require "config/environment.rb"
    order = Order.find(1)
    order.name = "Dave Thomas"
    order.save
#+END_SRC
** stand alone application
* Add New Reading to Welcome Page
1. [ ] Add a _form partial by linking to reading/_form
undefined method model_name' for NilClass:Class
Extracted source (around line #1):

1: <%= form_for(@reading) do |f| %>
2:   <% if @reading.errors.any? %>
3:     <div id="error_explanation">
4:       <h2><%= pluralize(@reading.errors.count, "error") %> prohibited this reading from being saved:</h2>
2. [ ] Add  @reading = Reading.new to welcome/index
3. [ ] Add hidden field ( see http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html )
4. [ ] Delete <%= f.label :user_id %><br />
5. [ ] Add @reading.user_id = session[:user_id] in create method in readings controller

* Draw a graph
1. [ ] [[http://nubyonrails.com/pages/gruff][http://nubyonrails.com/pages/gruff]]
2. [ ] Install easily with Ruby Gems (RMagick required):
sudo gem install gruff
3. [ ] Build and Install RMagick
       1. [ ] Download http://rubyforge.org/frs/download.php/70067/RMagick-2.13.1.tar.bz2 or from https://github.com/rmagick/rmagick
       2. [ ] Run "ruby setup.rb"
       3. [ ] Run "sudo ruby setup.rb install"
       4. [ ] cd into plugins and run gem unpack gruff
4. [ ] rails generate controller WeightGraph week month year
5. [ ] In config/environment.rb add require 'gruff' after the ::Application.initialize! line
6. [ ] See http://www.igvita.com/2007/01/05/dynamic-stat-graphs-in-rails/
7. [ ] See http://api.rubyonrails.org/classes/ActionController/DataStreaming.html
8. [ ] In weight_graph_controller.rb:
#+BEGIN_SRC ruby
  def month
    g = Gruff::Line.new
    g.title = "My Graph" 
    g.data("Apples", [1, 2, 3, 4, 4, 3])
    g.data("Oranges", [4, 8, 7, 9, 8, 9])
    g.data("Watermelon", [2, 3, 1, 5, 6, 8])
    g.data("Peaches", [9, 9, 10, 8, 7, 9])
    g.labels = {0 => '2003', 2 => '2004', 4 => '2012'}
    send_data(g.to_blob, :disposition => 'inline', :type => 'image/png', :filename => "1week.png")
  end
#+END_SRC
9. [ ] In View:
#+BEGIN_SRC ruby       
       <img src="<%= url_for :controller => "weight_graph", :action=> "month" %>" style="border:10px solid #aabcca;" />
#+END_SRC
* Display readings table on Welcome Page
1. [ ] @readings = Readings.all won't work because would get other user's Readings
2. [ ] Controller: @readings = Reading.by_user(session[:user_id]).order('reading_time DESC')
3. [ ] Model: scope :by_user, lambda { |user_id| where('user_id = ?', user_id) }
4. [ ] See http://asciicasts.com/episodes/215-advanced-queries-in-rails-3
5. [ ] See Agile book, active record
* Weight as a function of time
1. [ ] In Readings model, weight_at_time function
  def self.weight_at_time(user_id, time)
    time_initial = Reading.time_initial(user_id)
    weight_initial = Reading.weight_initial(user_id)
    if ( time < time_initial )
      return weight_initial
    end
    max_gain_rate = User.filter_rate_gain(user_id)
    max_loss_rate = User.filter_rate_loss(user_id)
    readings = Reading.get_readings_after( user_id, time_initial, time )
    for reading in readings
      w = apply_filter(max_gain_rate, max_loss_rate, time_initial, weight_initial, reading.reading_time, reading.weight)
      time_initial = reading.reading_time
      weight_initial = w
    end
    next_reading = Reading.get_next_reading_after(user_id, time)
    if next_reading
      weight = interpolate( max_gain_rate, max_loss_rate, time_initial, weight_initial, next_reading.reading_time, next_readi\
ng.weight, time )
    else
      weight = apply_filter(max_gain_rate, max_loss_rate, time_initial, weight_initial, time, reading.weight)
    end
    #    return number_with_precision(weight, :precision => 5 )                                                               
    return weight
  end
2. [ ] In Reading model, time_initial function
  def self.time_initial( user_id )
    return Reading.order('reading_time ASC').where(:user_id => user_id).first.reading_time
  end
3. [ ] In Reading model, weight_initial function
  def self.weight_initial( user_id )
    return Reading.order('reading_time ASC').where(:user_id => user_id).first.weight
  end
4. [ ] In User model, functions filter_rate_gain, filter_rate_loss, goal_loss_rate
#+BEGIN_SRC ruby
  def self.filter_rate_gain(user_id)
    return User.where(:id => user_id).first.filter_rate_gain
  end
  def self.filter_rate_loss(user_id)
    return User.where(:id => user_id).first.filter_rate_loss
  end
  def self.goal_loss_rate(user_id)
    cals_per_day = User.where(:id => user_id).first.goal_loss_rate
    lbs_per_second = cals_per_day / 3500.0 / 86400.0
    return  lbs_per_second
  end
#+END_SRC
5. [ ] In Reading model, self.get_readings_after, self.get_next_reading_after( user_id, time )
#+BEGIN_SRC ruby
  def self.get_readings_after( user_id, start_time, end_time )
    return Reading.order('reading_time ASC').where(:user_id => user_id).where('reading_time >= ? AND reading_time <= ?', start_time, end_time)
  end
  def self.get_next_reading_after( user_id, time )
      return Reading.order('reading_time ASC').where(:user_id => user_id).where('reading_time > ?', time).first
  end
#+END_SRC
6. [ ] In Reading model, apply_filter( max_gain_rate, max_loss_rate, initial_time, initial_weight, time, weight )
#+BEGIN_SRC ruby
  def self.apply_filter( max_gain_rate, max_loss_rate, initial_time, initial_weight, time, weight )
    if ( weight == initial_time )
      return weight
    else
      delta_time = ( time - initial_time ).to_i
      cals_day_pounds_second = 1.0 / 86400.0 / 3500.0
      max_allowable_weight = initial_weight + ( max_gain_rate * cals_day_pounds_second * delta_time )
      min_allowable_weight = initial_weight - ( max_loss_rate * cals_day_pounds_second * delta_time )
      if ( weight > max_allowable_weight )
        return max_allowable_weight
      end
      if ( weight < min_allowable_weight )
        return min_allowable_weight
      end
    end
    return  weight
  end
#+END_SRC
7. [ ] In Reading model, interpolate
#+BEGIN_SRC ruby
  def self.interpolate( max_gain_rate, max_loss_rate, last_time, last_weight, next_time, next_weight, time )
    filtered_next_weight = apply_filter(max_gain_rate, max_loss_rate, last_time, last_weight, next_time, next_weight )
    delta_time = next_time - last_time
    delta_weight = ( filtered_next_weight - last_weight )
    percent = ( time - last_time ) / delta_time.to_f
    interpolated_weight = last_weight + percent * delta_weight
  end
#+END_SRC

* Weight loss/gain over the last 28 days
